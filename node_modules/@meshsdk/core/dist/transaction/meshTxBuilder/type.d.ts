import { Asset, Budget, Data, LanguageVersion, PlutusScript, UTxO, PoolParams } from '@mesh/common/types';
export declare type MeshTxBuilderBody = {
    inputs: TxIn[];
    outputs: Output[];
    extraInputs: UTxO[];
    selectionThreshold: number;
    collaterals: PubKeyTxIn[];
    requiredSignatures: string[];
    referenceInputs: RefTxIn[];
    mints: MintItem[];
    changeAddress: string;
    metadata: Metadata[];
    validityRange: ValidityRange;
    certificates: Certificate[];
    signingKey: string[];
};
export declare type TxIn = PubKeyTxIn | ScriptTxIn;
export declare type PubKeyTxIn = {
    type: 'PubKey';
    txIn: TxInParameter;
};
export declare type TxInParameter = {
    txHash: string;
    txIndex: number;
    amount?: Asset[];
    address?: string;
};
export declare type ScriptTxIn = {
    type: 'Script';
    txIn: TxInParameter;
    scriptTxIn: ScriptTxInParameter;
};
export declare type ScriptTxInParameter = {
    scriptSource?: {
        type: 'Provided';
        script: PlutusScript;
    } | {
        type: 'Inline';
        txInInfo: ScriptSourceInfo;
    };
    datumSource?: {
        type: 'Provided';
        data: BuilderData;
    } | {
        type: 'Inline';
        txHash: string;
        txIndex: number;
    };
    redeemer?: Redeemer;
};
export declare type ScriptSourceInfo = {
    txHash: string;
    txIndex: number;
    spendingScriptHash?: string;
    version: LanguageVersion;
};
export declare type RefTxIn = {
    txHash: string;
    txIndex: number;
};
export declare type Output = {
    address: string;
    amount: Asset[];
    datum?: {
        type: 'Hash' | 'Inline';
        data: BuilderData;
    };
    referenceScript?: PlutusScript;
};
export declare type MintItem = {
    type: 'Plutus' | 'Native';
    policyId: string;
    assetName: string;
    amount: string;
    redeemer?: Redeemer;
    scriptSource?: {
        type: 'Provided';
        script: PlutusScript;
    } | {
        type: 'Reference Script';
        txHash: string;
        txIndex: number;
        version: LanguageVersion;
    };
};
export declare type ValidityRange = {
    invalidBefore?: number;
    invalidHereafter?: number;
};
export declare type BuilderData = {
    type: 'Mesh';
    content: Data;
} | {
    type: 'JSON';
    content: string;
} | {
    type: 'CBOR';
    content: string;
};
export declare type Redeemer = {
    data: BuilderData;
    exUnits: Budget;
};
export declare type Metadata = {
    tag: string;
    metadata: object;
};
export declare type Certificate = {
    type: 'RegisterPool';
    poolParams: PoolParams;
} | {
    type: 'RegisterStake';
    stakeKeyHash: string;
} | {
    type: 'DelegateStake';
    stakeKeyHash: string;
    poolId: string;
} | {
    type: 'DeregisterStake';
    stakeKeyHash: string;
} | {
    type: 'RetirePool';
    poolId: string;
    epoch: number;
};
export declare type RequiredWith<T, K extends keyof T> = Required<T> & {
    [P in K]: Required<T[P]>;
};
